#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

// Функция для добавления двух строк с числами
std::string addStrings(const std::string& num1, const std::string& num2) {
    std::string result = ""; // Результат сложения
    int carry = 0; // Разряд переноса
    int FirstCurrentIndex = num1.length() - 1; // Индекс текущей цифры в num1
    int secondCurrentIndex = num2.length() - 1; // Индекс текущей цифры в num2

    // Складываем цифры чисел, пока не достигнем конца одного из чисел
    while (FirstCurrentIndex >= 0 || secondCurrentIndex >= 0) {
        int digit1 = (FirstCurrentIndex >= 0) ? num1[FirstCurrentIndex] - '0' : 0; // Текущая цифра num1
        int digit2 = (secondCurrentIndex >= 0) ? num2[secondCurrentIndex] - '0' : 0; // Текущая цифра num2

        // Вычисляем сумму цифр и разряд переноса
        int sum = digit1 + digit2 + carry;
        carry = sum / 10;
        sum %= 10;

        // Добавляем текущую цифру суммы в результат
        result.insert(0, 1, sum + '0');

        // Уменьшаем индексы
        FirstCurrentIndex--;
        secondCurrentIndex--;
    }

    // Если остался разряд переноса, добавляем его в результат
    if (carry > 0) {
        result.insert(0, 1, carry + '0');
    }

    return result;
}

// Функция для вычитания двух строк с числами
std::string subtractLongNumbers(const std::string& num1, const std::string& num2) {
    std::vector<int> result; // Результат вычитания
    std::vector<int> arr1(num1.length()); // Цифры первого числа
    std::vector<int> arr2(num2.length()); // Цифры второго числа

    // Заполняем массивы цифрами чисел (обратный порядок)
    for (int i = 0; i < num1.length(); i++) {
        arr1[i] = num1[num1.length() - 1 - i] - '0';
    }
    for (int i = 0; i < num2.length(); i++) {
        arr2[i] = num2[num2.length() - 1 - i] - '0';
    }

    int borrow = 0; // Разряд заема

    // Выполняем вычитание цифр чисел
    for (int i = 0; i < arr1.size(); i++) {
        int diff = arr1[i] - borrow;
        if (i < arr2.size()) {
            diff -= arr2[i];
        }
        if (diff < 0) {
            diff += 10;
            borrow = 1;
        } else {
            borrow = 0;
        }
        result.push_back(diff);
    }

    // Удаляем ведущие нули в результате
    while (result.size() > 1 && result.back() == 0) {
        result.pop_back();
    }

    // Преобразуем результат обратно в строку
    std::string resultString = "";
    for (int i = result.size() - 1; i >= 0; i--) {
        resultString += std::to_string(result[i]);
    }

    return resultString;
}

// Функция для умножения двух строк с числами
std::string multiplyStrings(const std::string& num1, const std::string& num2) {
    std::string result = "0"; // Результат умножения

    // Умножаем каждую цифру num1 на num2 и добавляем результаты
    // с учетом позиции цифры в исходном числе
    for (int i = num1.length() - 1; i >= 0; i--) {
        std::string tempResult = ""; // Результат умножения текущей цифры num1 на num2
        int carry = 0; // Разряд переноса

        // Умножаем текущую цифру num1 на num2
        int digit1 = num1[i] - '0';
        for (int j = num2.length() - 1; j >= 0; j--) {
            int digit2 = num2[j] - '0';

            int product = digit1 * digit2 + carry;
            carry = product / 10;
            product %= 10;

            tempResult.insert(0, 1, product + '0');
        }

        // Если остался разряд переноса, добавляем его в результат
        if (carry > 0) {
            tempResult.insert(0, 1, carry + '0');
        }

        // Добавляем нули в конец в зависимости от позиции цифры
        for (int k = i; k < num1.length() - 1; k++) {
            tempResult.append("0");
        }

        // Складываем результат текущего умножения с общим результатом
        result = addStrings(result, tempResult);
    }

    return result;
}

// Функция для целочисленного деления двух строк с числами
std::string divideStrings(const std::string& num1, const std::string& num2) {
    std::string result = ""; // Частное от деления
    std::string dividend = num1; // Делимое

    // Если делимое меньше делителя, возвращаем 0
    if (dividend.length() < num2.length() ||
        (dividend.length() == num2.length() && dividend < num2)) {
        return "0";
    }

    // Производим деление пока делимое не станет меньше делителя
    while (dividend.length() >= num2.length()) {
        std::string quotient = ""; // Частное текущего деления
        std::string tempDividend = dividend.substr(0, num2.length()); // Подстрока делимого длины делителя

        // Вычитаем делитель из подстроки делимого
        while (tempDividend.length() > 0) {
            std::string tempQuotient = "0"; // Частное текущего вычитания
            std::string tempSubtract = "";

            // Увеличиваем частное текущего вычитания на единицу
            while (tempSubtract.length() < tempDividend.length() && tempSubtract <= tempDividend) {
                tempSubtract = addStrings(tempSubtract, num2);
                tempQuotient = addStrings(tempQuotient, "1");
            }

            // Уменьшаем подстроку делимого на указанное число вычитаний
            tempDividend = subtractLongNumbers(tempDividend, tempSubtract);

            // Удаляем ведущие нули
            while (tempDividend.length() > 1 && tempDividend[0] == '0') {
                tempDividend.erase(0, 1);
            }

            // Добавляем частное текущего вычитания в общее частное
            quotient.append(tempQuotient);
        }

        // Добавляем ведущие нули в частное в зависимости от позиции
        // подстроки делимого в исходном числе
        for (int i = 0; i < dividend.length() - tempDividend.length(); i++) {
            quotient.insert(0, 1, '0');
        }

        // Добавляем текущее частное к общему частному
        result = addStrings(result, quotient);

        // Удаляем подстроку делимого из делимого
        dividend = dividend.substr(tempDividend.length(), dividend.length() - tempDividend.length());
    }

    return result;
}

// Функция для сравнения двух строк с числами
int compareStrings(const std::string& num1, const std::string& num2) {
    // Если длины чисел разные, меньшее число имеет меньшую длину
    if (num1.length() < num2.length()) {
        return -1;
    } else if (num1.length() > num2.length()) {
        return 1;
    }

    // Длины чисел равны, сравниваем цифры по порядку
    for (int i = 0; i < num1.length(); i++) {
        if (num1[i] < num2[i]) {
            return -1;
        } else if (num1[i] > num2[i]) {
            return 1;
        }
    }

    // Числа равны
    return 0;
}

int main() {
    std::string num1, num2;
    std::cout << "Введите первое число: ";
    std::cin >> num1;
    std::cout << "Введите второе число: ";
    std::cin >> num2;

    // Сложение
    std::string sum = addStrings(num1, num2);
    std::cout << "Сумма: " << sum << std::endl;

    // Вычитание
    std::string difference = subtractLongNumbers(num1, num2);
    std::cout << "Разность: " << difference << std::endl;

    // Умножение
    std::string product = multiplyStrings(num1, num2);
    std::cout << "Произведение: " << product << std::endl;

    // Целочисленное деление
    std::string quotient = divideStrings(num1, num2);
    std::cout << "Частное: " << quotient << std::endl;

    // Сравнение
    int comparison = compareStrings(num1, num2);
    if (comparison < 0) {
        std::cout << "Первое число меньше второго" << std::endl;
    } else if (comparison > 0) {
        std::cout << "Первое число больше второго" << std::endl;
    } else {
        std::cout << "Числа равны" << std::endl;
    }

    return 0;
}
